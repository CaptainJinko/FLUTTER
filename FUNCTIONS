//FIRST TYPE OF FUNCTION,  NO ARGUMENT 
Basic fynction without arguments
void main(){
onPressed() {
 },
},

...................................................................................................................................................................................

Fucntion with argument

void playSoud(String Name){
final AudioCache player=AudioCache();
player.play('$name.wave');
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void main(){
  
  greet('Elias');
  
}
void greet(String name){
  print('Good Morning $name');
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void main(){
  
  greet('Elias Adam Jinko');
  
 }

void greet(String personToGreet){
  
  print('Goed Morgen Meneer $personToGreet');
  
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 //function in explicit way by flutter team 
 
 void main(){
   
   greet(greeting:'How are you', personToGreet:'Elias Jinko');
   
 }

void greet({String personToGreet, String greeting}){   //remember the curly braces in the argument
  
  print('$greeting, $personToGreet');
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Third form of function

void main(){
    findPerimeter();
  }

void findPerimeter(){
  int length =4;
  int breath= 2;
  
  int perimeter= 2 * (length+breath);
  print('The perameter is = $perimeter');
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Passing parameter or Function with argument or method signature

void main(){
    findPerimeter(4, 2);
  
  }

void findPerimeter( int length, int breath){         //even if you remove [void] it will work but leave it there it is dart convetion 
   
  
  int perimeter= 2 * (length+breath);
  print('The perameter is = $perimeter');
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 void main(){
   
   findPerimeter();
 }

findPerimeter(){
  int length= 6;
  int breath =4;
  
  int perimeter= 2*(length+breath);
  
  print(perimeter);
  
  print('The perimmter is $perimeter ');

}

-------------------------------------------------------------------------------------------------------------
void main(){
    
    int rectArea= getArea(25, 20);
    print('The Area is = $rectArea');
  }

int getArea(int length, int breath){
  
  int area= length* breath;
  
  print(area);
  return area;
  
}
--------------------------------------------------------------------------------------------------------
//Expression in Function: [SHORT HAND SYNTAX]

void main(){
  findPerimeter(4,2);
  
}

void findPerimeter(int length, int breath){
  
  print('The perimter is ${2* (length + breath)}');
}
-------------------------------------------------------------------------------------------------------
//Applying the fat arrow [dont use curly braces {}]

void main(){
  findPerimeter(7,2);
  
}

void findPerimeter(int length, int breath) => print('The perimter is ${2* (length + breath)}');

------------------------------------------------------------------------------------------------------
//Applying the fat arrow or SHORT HAND SYNTAX [dont use curly braces {} removing the return keyword]

 void main(){
  //findPerimeter(7,2);
  
  int rectArea= getArea(10,5);
  print('The area is $rectArea');
  
}

void findPerimeter(int length, int breath) => print('The perimter is ${2* (length + breath)}');

int getArea (int length, int breath) =>   length * breath;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------




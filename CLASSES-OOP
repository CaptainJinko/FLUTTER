/*From a programming point of view Same concept here goes with Classes and Object’s terminology.The blueprint is called Class and the microphones or any other devices is
called object here.Class is a blueprint from which we can create a number of objects. All objects will have access to all properties and methods. You can also modify
access according to your need.In Object Oriented Programming class is made up of four main things Properties (Instance Variables) Methods (Functions) Getters and 
Setters Constructors These all components are also called data members of the class. Remember here Properties can be also called Instance Variable and Methods are also 
called Functions.*/
[1]
Syntax of Declaring Class
class class_name {
   // Properties (Instance Variables)
   // Constructor
   // Methods (Functions)
   // Getters and Setters
}
Sample Code
[2]
class Mobile {
  String color;
  String brandName;

  String calling() {
    return "Mobile can do calling";
  }

  String musicPlay() {
    return "Mobile can play Music";
  }
}
------------------------------------------------------------------------------------
//Let’s understand all concepts by one complete program
class Mobile {
  String color; // Property
  String brandName;
  String modelName;

  String calling() { // Method Creation
    return "Mobile can do calling";
  }

  String musicPlay() {
    return "Mobile can play Music";
  }

  String videoPlay() {
    return "Mobile can play video";
  }
}

main() {
  var myMobile = new Mobile(); // Creating Object

  myMobile.color = "White"; // Accessing Class's Property
  myMobile.brandName = "Apple Inc.";
  myMobile.modelName = "iPhone 14";
  
  print(myMobile.color);
  print(myMobile.modelName);
  print(myMobile.brandName);
  print(myMobile.calling());
  print(myMobile.musicPlay());
  print(myMobile.videoPlay());
}

Output
White
iPhone 14
Apple Inc.
Mobile can do calling
Mobile can play Music
Mobile can play video
...............................................................................................................................................................................................

void main(){
  
   Human jenny = Human();
   
   //print(jenny.height);
   
   jenny.height= 10;
   print(jenny.height);
   
   Human james= Human();
   print(james.height);
 }

class Human{
  
  double height;   //field or properry
  
  int age=0;      //field or property
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//class with constructor, it determines every object with its own seperate properties

void main(){
  
   Human jenny = Human(25);
   
   //print(jenny.height);
   
   //jenny.height= 10;
   print(jenny.height);
   
   Human james= Human(20);
   print(james.height);
 }

class Human{
  
  double height;
  
  int age=0;
  
  Human(double startingHeight){
    height =startingHeight;
  }
  
  
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//You can also make it specific as below, in tis case dont forget {} curly braces in constructor

void main(){
  
   Human jenny = Human(startingHeight:25);
   
   //print(jenny.height);
   
   //jenny.height= 10;
   print(jenny.height);
   
   Human james= Human(startingHeight: 20);
   print(james.height);
 }

class Human{
  
  double height;
  
  int age=0;
  
  Human({double startingHeight}){    
    height =startingHeight;
  }
  
  
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//class with  a method, function in classes are called method, variables in classes are called field or proporties 

void main(){
  
  Human jenny = Human(startingHeight: 15);
  
   print(jenny.height);
   
  jenny.talk('Why this I like Dart');
   
}

class Human{
  double height;
   int age=0;
  
  Human({double startingHeight}){
    height = startingHeight;
  }
  
  void talk(String whatToSay){
    print(whatToSay);
  }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




................................................................................................................................................................................
//Dart Classes and Objecst

class Car{
  int numberOfDoors= 5;                      //property / fields   /variable
   
    void drive() {                           // function,behavoiur /method
     print('Wheels start turning ');         //function, behaviour method 
   
     } 
       
}
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 void main(){
   Human elias= Human();
   print(elias.height);
   print(elias.age);
   print(elias.name);
   
   Human jinko= Human();
   print(jinko.height);
   print(jinko.name);
   print(jinko.age);
 }

class Human{
  
  double height= 9.9;
  String name= 'Elias';
  int age=45;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void main(){
  Human jenny = Human();
  
  print(jenny.height);
  
//   jenny.height=20; 
//   print(jenny.height);
//   print(jenny.age);
  
  Human james= Human();
  print(james.height);
  
}

class Human{
  
  double height= 15;
  int age= 0;
}
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Name parameters to make clearer. Take note of the curly braces

void main(){
   Human jenny = Human(startingHeight:15);
   print(jenny.height);
   
   Human james= Human(startingHeight:20);
   print(james.height);
   
   Human elias =Human(startingHeight:45);
   print(elias.height);
}

class Human{
  
  double height= 15;
  int age= 0;
  
  Human({double startingHeight}) {      //Constructor
    height = startingHeight;
    
  }

}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Creating a method inside a class[function defined in a class is called a method ]
void main(){
   Human jenny = Human(startingHeight:15);
   print(jenny.height);
    
   jenny.talk('Why is flutter so interesting');
}

class Human{
  
  double height= 15;
  int age= 0;
  
  Human({double startingHeight}) {
    height = startingHeight;
    
  }
  void talk(String whatToSay){    constructor Take notice of the [String is works without The String declaration as well
    print(whatToSay);
  }

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
//More examples with constructors

void main() {
  Student james = Student(startingHeight: 12);
  print(james.height);

  Student john = Student(startingHeight: 26);
  print(john.height);

  Student elias = Student(startingHeight: 10);
  print(elias.height);

  Student mary = Student(startingHeight: 15);
  print(mary.height);

  print(' ');      //To separate line int between

  mary.speak('Hello boys we are becoming flutter gurus');
}

class Student {
  int age = 25;
  double height = 1.9;

  Student({double startingHeight}) {
    //constructors
    height = startingHeight;
  }
  void speak(String saySomething) {
    print(saySomething);
  }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void main(){
   Human jenny = Human(startingHeight:15);
   print(jenny.height);
    
   jenny.talk('Why is flutter so interesting');
}

class Human{
  
  double height= 15;
  int age= 0;
  
  Human({double startingHeight}) {
    height = startingHeight;
    
  }
  void talk(String whatToSay){   //Take notice with String declaration it is specific data type without is dynamic accepts all
    print(whatToSay);
  }

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void main() {
 Human jenney= Human();
  
  print(jenney.height);
  
  print(jenney.age);
  
}

class Human{
  double height = 15;
  int age=0;
} 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Tutorials

 void main(){
   
    var student1=  Student();
    print('${student1.id} and ${student1.name}');
 }

//define state(properties) of a Student 

class  Student{
  
int id;           //Instance or Field Variable, default value is null
String name;      //Instance or Field Variable, default value is null

void study(){
  
  //Your code
}

  void sleep(){
    
    //Your code
  }
 }
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 //The below codes have variable, fields and is not null

 void main(){
   
    var student1=  Student();
    print('${student1.id} and ${student1.name}');
    
    student1.study();
    student1.sleep();
 }

//define state(properties) of a Student 

class  Student{
  
int id= 25;                 
String name = 'Elias';       

void study(){
  print('${this.name} is now stuying');
  //Your code
}

  void sleep(){
    print('${this.name} is now sleeping');
    //Your code
  }
 }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 void main(){
   
    var student1=  Student();      //One Object is reference variable
    print('${student1.id} and ${student1.name}');
   
    student1.study();
    student1.sleep();
   
    var student2= Student();   //One Object, students is reference variable 
    student2.id= 46;
    student2.name= 'Jinko';
    print('${student2.id} and ${student2.name}');
    student2.study();
    student2.sleep();
      
 }

//define state(properties) of a Student 

class  Student{
  
int id= 23;                 
String name = 'Elias';       

void study(){
  print('${this.name} is now stuying');  
}

  void sleep(){
    print('${this.name} is now sleeping');
    
  }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//INHERITANCE
//Inheritance

void main(){
  Car myNormalCar = Car();
   
   print(myNormalCar.numberOfSeat); // printing numer of seat from the field or property
   myNormalCar.drive();   //calling method to print wheels turns on the console
 
 }
 
class Car{
  int numberOfSeat= 5;
  
  void drive(){
    print('wheels turn');
  }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 void main(){
  Car myNormalCar = Car();
   
   print(myNormalCar.numberOfSeat);     // printing numer of seat from the field or property
   myNormalCar.drive();                  //calling method to print wheels turns on the console   
     
 }
 
class Car{
  int numberOfSeat= 5;
  
  void drive(){
    print('wheels turn'); 
    
    
  }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------
//ElectricCar has inheritated methods and propertie of Car 

void main(){
//   Car myNormalCar = Car();   
//    print(myNormalCar.numberOfSeat);     // printing numer of seat from the field or property 
//    myNormalCar.drive();                  //calling method to print wheels turns on the console

   
   ElectricCar myBenz = ElectricCar(); 
   myBenz.drive(); 
   print('My Benz has ${myBenz.numberOfSeat} seats');
  
 }
 
class Car{
  int numberOfSeat= 5;
  
  void drive(){
    print('wheels turn'); 
    
    
  }
}

class ElectricCar extends Car{
  
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Electric has its own funatinalities 

 void main(){
//   Car myNormalCar = Car(); 
//    print(myNormalCar.numberOfSeat);     // printing numer of seat from the field or property
//    myNormalCar.drive();                  //calling method to print wheels turns on the console
   
   ElectricCar myBenz = ElectricCar(); 
   myBenz.drive(); 
   print('My Benz has ${myBenz.numberOfSeat} seats');
   print('My Benz battery level is ${myBenz.batteryLevel} volt');
   
  
 }
 
class Car{
  int numberOfSeat= 5;
  
  void drive(){
    print('wheels turn'); 
    
  }
}

class ElectricCar extends Car{
 int batteryLevel= 125; 
}
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  //Polymorphism The word polymorphism means having many forms, we method drive() in different forms/ Chaging shapes 
  void main(){
//   Car myNormalCar = Car();
   
//    print(myNormalCar.numberOfSeat);     // printing numer of seat from the field or property
  
//    myNormalCar.drive();                  //calling method to print wheels turns on the console
   
   ElectricCar myBenz = ElectricCar(); 
   myBenz.drive(); 
   print('My Benz has ${myBenz.numberOfSeat} seats');
   print('My Benz battery level is ${myBenz.batteryLevel} volt');
   
   LevitatingCar myMagLev= LevitatingCar();
   myMagLev.drive();
   
  
 }
 
class Car{
  int numberOfSeat= 5;
  
  void drive(){
    print('wheels turn'); 
    
    
  }
}

class ElectricCar extends Car{
 int batteryLevel= 125; 
}
  
class LevitatingCar extends Car{
  @override                                  //override the oarent behavour and provide our customised version of it
  void drive(){
    print('glide forwards');
  }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Polymorphismin action, SelfDrivingCar has inherited some action from the parent class and also has some of its functionalities 

void main(){
   
   SelfDrivingCar myWaymo= SelfDrivingCar('1 Hecker Way');
    
  myWaymo.drive();
   
   
 }
 
class Car{
  int numberOfSeat= 5;
  
  void drive(){
    print('wheels turn'); 
    
  }
}

class ElectricCar extends Car{
 int batteryLevel= 125; 
}
  
class SelfDrivingCar extends Car {
 
  String destination;
  
  SelfDrivingCar(String userSetDestination){
    destination = userSetDestination;
  }
      
  @override
  void drive(){
    super.drive();
    
    print('sterring towards $destination');
  }
  
} 
--------------------------------------------------------------
